name: Extract OpenRouter Cookies

on:
  workflow_dispatch: # Allows manual triggering
    inputs:
      email:
        description: 'OpenRouter Email Address'
        required: true
        type: string
      proxy_type:
        description: 'Proxy type (http, https, socks4, socks5)'
        required: false
        default: 'http'
        type: string

jobs:
  extract-cookies:
    runs-on: macos-latest # As requested: Use macOS runner

    steps:
      - name: Check out repository code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11' # Use a recent stable Python version

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install seleniumbase # Install SeleniumBase

      - name: Install WebDriver (ChromeDriver for UC Mode)
        run: |
          seleniumbase install chromedriver latest # Ensure compatible chromedriver

      - name: Run SeleniumBase script to extract cookies
        env:
          # Pass email from workflow input
          OPENROUTER_EMAIL: ${{ github.event.inputs.email }}
          # Pass password and proxy securely from GitHub Secrets
          OPENROUTER_PASSWORD: ${{ secrets.OPENROUTER_PASSWORD }}
          PROXY_STRING: ${{ secrets.PROXY_STRING }} # Store as user:pass@host:port
          PROXY_TYPE: ${{ github.event.inputs.proxy_type }}
        run: |
          # Construct the full proxy URL (SeleniumBase --proxy needs full string)
          # Ensure PROXY_STRING secret is set in user:pass@host:port format
          FULL_PROXY="${{ env.PROXY_TYPE }}://${{ env.PROXY_STRING }}"

          # Run the pytest script with necessary options
          # --uc enables Undetected Chromedriver mode (essential for stealth & CAPTCHA)
          # --proxy passes the full proxy string securely
          # -s shows print statements from the test
          pytest extract_cookies.py --proxy="${FULL_PROXY}" --uc -s

      - name: Upload cookies as artifact
        uses: actions/upload-artifact@v4
        with:
          name: openrouter-cookies
          path: openrouter_cookies.json # The file generated by the Python script
          if-no-files-found: error # Fail if the cookies file wasn't created
